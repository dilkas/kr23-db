domain elevators_simple_mdp {
	
	requirements = {
		constrained-state,
		reward-deterministic
	};
	
	types {
		floorpair : object;
	  	floor     : object;
	}; 
	
	pvariables { 
	
		//Non-Fluents 
		ARRIVE-PARAM(floor) : { non-fluent, real, default = 0.3 }; 		  		
		ADJACENT(floorpair)                : { non-fluent, bool, default = false };
		FROM(floorpair,floor)           : { non-fluent, bool, default = false };
		TO(floorpair,floor)             : { non-fluent, bool, default = false };

		// State-Fluents
		person-waiting(floorpair)       : { state-fluent, bool, default = false };
		person-in-elevator(floorpair)   : { state-fluent, bool, default = false };		
		elevator-at-floor(floor)        : { state-fluent, bool, default = false };

		// Action-fluents
		move(floorpair)                 : { action-fluent, bool, default = false };		
	};
  
	cpfs {
		
		person-waiting'(?fp) = 
			if (person-waiting(?fp)) ^ 
			then KronDelta((~exists_{?f : floor} [FROM(?fp,?f) ^ elevator-at-floor(?f)]))
			else Bernoulli(ARRIVE-PARAM(?fp));
			
  		person-in-elevator'(?fp) = 
  			if (person-in-elevator(?fp))
  			then KronDelta( ~exists_{?f : floor} [TO(?fp,?f) ^ elevator-at-floor(?f)] )
  			else KronDelta( exists_{?f : floor} [FROM(?fp,?f) ^ elevator-at-floor(?f) ^ person-waiting(?fp)] );

		elevator-at-floor'(?f) =
			if (elevator-at-floor(?f))
			then KronDelta(~exists_{?fp : floorpair} [FROM(?fp,?f) ^ ADJACENT(?fp) ^ move(?fp)])
			else KronDelta(exists_{?fp : floorpair} [TO(?fp,?f) ^ ADJACENT(?fp) ^ move(?fp)]);			
	};
  
  	// Reward is a sum of waiting penalties for those in elevators and at floor
	reward = 
	        [sum_{?fp : floorpair} [
	       		 ~person-in-elevator(?fp)
	       	]]
	        +
	        [sum_{?fp : floorpair} [
	       		  ~person-waiting-up(?fp) 
	        ]];

	state-action-constraints {
		sum_{?f : floor} [elevator-at-floor(?f)] = 1;	
	};
}




non-fluents dom1 {
	domain = elevators_simple_mdp ;
	objects {
		floor : { f1, f2, f3, f4 };
		floorpair : { f1_2, f1_3, f1_4, f2_1, f2_3, f2_4, f3_1, f3_2, f3_4, f4_1, f4_2, f4_3 }; 
	};
	non-fluents {
		FROM(f1_2,f1) ; FROM(f1_3,f1) ; FROM(f1_4,f1) ; FROM(f2_1,f2) ; FROM(f2_3,f2) ; FROM(f2_4,f2) ; 
		FROM(f3_1,f3) ; FROM(f3_2,f3) ; FROM(f3_4,f3) ; FROM(f4_1,f4) ; FROM(f4_2,f4) ; FROM(f4_3,f4) ;       
		TO(f1_2,f2) ; TO(f1_3,f3) ; TO(f1_4,f4) ; TO(f2_1,f1) ; TO(f2_3,f3) ; TO(f2_4,f4) ; 
		TO(f3_1,f1) ; TO(f3_2,f2) ; TO(f3_4,f4) ; TO(f4_1,f1) ; TO(f4_2,f2) ; TO(f4_3,f3) ;
		ADJACENT(f1_2) ; ADJACENT(f2_1) ; ADJACENT(f2_3) ; ADJACENT(f3_2) ; ADJACENT(f3_4) ; ADJACENT(f4_3) ;        		
	};
}

instance inst1 {
	domain = elevators_simple_mdp ;
	non-fluents = dom1 ;
	init-state {
		   elevator-at-floor(f1);
	};
max-nondef-actions = 1;
horizon = 10;
discount = 0.99;
}
